# Generated by Django 3.1.5 on 2023-11-27 16:17

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Job2Task',
            fields=[
                ('jobID', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('task_name', models.CharField(max_length=80)),
                ('email', models.EmailField(default=None, max_length=254, null=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobStat',
            fields=[
                ('jobID', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('celery_task_id', models.CharField(max_length=100)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Multi_Fasta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(blank=True, max_length=4000, verbose_name='fasta路径')),
                ('filename', models.CharField(blank=True, max_length=2000, verbose_name='fasta路径')),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Multi_Upload',
            fields=[
                ('jobID', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('path', models.CharField(max_length=4000)),
                ('filename', models.CharField(max_length=2000)),
                ('tasktype', models.CharField(max_length=100)),
                ('marker', models.CharField(max_length=100, null=True)),
                ('email', models.EmailField(max_length=254)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='pipelineSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jobID', models.CharField(max_length=50, verbose_name='任务编号')),
                ('strain', models.CharField(max_length=100, verbose_name='菌株编号')),
                ('sampleName', models.CharField(blank=True, max_length=100, verbose_name='样品名称')),
                ('create_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sampling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_delete', models.BooleanField(default=False)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(auto_now=True)),
                ('receiver', models.CharField(blank=True, help_text='收样人', max_length=100, null=True, verbose_name='收样人')),
                ('labName', models.CharField(blank=True, help_text='项目名称', max_length=100, null=True, verbose_name='项目名称')),
                ('project', models.CharField(blank=True, help_text='样品收集实验室名称', max_length=100, null=True, verbose_name='样品收集实验室名称')),
                ('sampleNo', models.CharField(blank=True, help_text='采样样品编号', max_length=100, null=True, unique=True, verbose_name='采样样品编号')),
                ('collectionTime', models.CharField(blank=True, help_text='样品收集时间', max_length=50, null=True, verbose_name='样品收集时间')),
                ('sourceType', models.CharField(blank=True, help_text='样品来源', max_length=50, null=True, verbose_name='样品来源')),
                ('productName', models.CharField(blank=True, help_text='产品名称', max_length=100, null=True, verbose_name='产品名称')),
                ('processLink', models.CharField(blank=True, help_text='加工环节', max_length=100, null=True, verbose_name='加工环节')),
                ('envMaterials', models.CharField(blank=True, help_text='环境材料', max_length=100, null=True, verbose_name='环境材料')),
                ('envLocation', models.CharField(blank=True, help_text='环境位置', max_length=100, null=True, verbose_name='环境位置')),
                ('collectionDevice', models.CharField(blank=True, help_text='收集装置', max_length=100, null=True, verbose_name='收集装置')),
                ('collectionMethod', models.CharField(blank=True, help_text='收集方法', max_length=100, null=True, verbose_name='收集方法')),
                ('organizationId', models.IntegerField(blank=True, help_text='组织id', null=True, verbose_name='组织id')),
                ('city', models.CharField(blank=True, help_text='城市', max_length=50, null=True, verbose_name='城市')),
                ('province', models.CharField(blank=True, help_text='省份', max_length=50, null=True, verbose_name='省份')),
                ('country', models.CharField(blank=True, help_text='国家', max_length=50, null=True, verbose_name='国家')),
                ('beiDou', models.CharField(blank=True, help_text='北斗', max_length=100, null=True, verbose_name='北斗')),
                ('location', models.CharField(blank=True, help_text='经纬度', max_length=100, null=True, verbose_name='经纬度')),
                ('create_userid', models.IntegerField(blank=True, help_text='创建用户id', null=True, verbose_name='创建用户id')),
                ('update_userid', models.IntegerField(blank=True, help_text='更新用户id', null=True, verbose_name='更新用户id')),
                ('remarks', models.CharField(blank=True, max_length=250, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name': '采样信息表',
                'verbose_name_plural': '采样信息表',
                'ordering': ['-create_time', '-updated_time'],
            },
        ),
        migrations.CreateModel(
            name='Sequencing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_delete', models.BooleanField(default=False)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(auto_now=True)),
                ('seqNo', models.CharField(blank=True, help_text='测序样品编号', max_length=100, null=True, verbose_name='测序样品编号')),
                ('sequencer', models.CharField(blank=True, help_text='测序人', max_length=100, null=True, verbose_name='测序人')),
                ('seq_date', models.DateField(help_text='测序日期', null=True, verbose_name='测序日期')),
                ('strainId', models.CharField(blank=True, help_text='菌株编号', max_length=100, null=True, verbose_name='菌株编号')),
                ('sampleName', models.CharField(blank=True, help_text='样品名称', max_length=100, null=True, verbose_name='样品名称')),
                ('DNA_kitName', models.CharField(blank=True, help_text='试剂盒名称', max_length=100, null=True, verbose_name='试剂盒名称')),
                ('DNA_batch', models.CharField(blank=True, help_text='DNA批次号', max_length=10, null=True, verbose_name='DNA批次号')),
                ('DNA_labProtocol', models.CharField(blank=True, help_text='DNA实验室protocol', max_length=200, null=True, verbose_name='DNA实验室protocol')),
                ('DNA_nongdu', models.CharField(blank=True, help_text='DNA浓度', max_length=50, null=True, verbose_name='DNA浓度')),
                ('DNA_q', models.CharField(blank=True, help_text='DNA质量', max_length=50, null=True, verbose_name='DNA质量')),
                ('DNA_qc', models.CharField(blank=True, help_text='A260/A280', max_length=100, null=True, verbose_name='A260/A280')),
                ('qualityRate', models.CharField(blank=True, help_text='质量评级', max_length=100, null=True, verbose_name='质量评级')),
                ('seq_batch', models.CharField(blank=True, help_text='测序批次', max_length=100, null=True, verbose_name='测序批次')),
                ('repetitionType', models.CharField(blank=True, help_text='重复类型', max_length=100, null=True, verbose_name='重复类型')),
                ('wenku_kitName', models.CharField(blank=True, help_text='试剂盒名称（文库）', max_length=100, null=True, verbose_name='试剂盒名称（文库）')),
                ('wenku_batch', models.CharField(blank=True, help_text='批次号（文库）', max_length=100, null=True, verbose_name='批次号（文库）')),
                ('wenku_labProtocol', models.CharField(blank=True, help_text='批次号（文库）', max_length=100, null=True, verbose_name='批次号（文库）')),
                ('adapter', models.CharField(blank=True, help_text='接头信息', max_length=100, null=True, verbose_name='接头信息')),
                ('wenku_name', models.CharField(blank=True, help_text='文库编号', max_length=100, null=True, verbose_name='文库编号')),
                ('wenku_nongdu', models.CharField(blank=True, help_text='浓度（文库质量）', max_length=100, null=True, verbose_name='浓度（文库质量）')),
                ('wenku_size', models.CharField(blank=True, help_text='文库片段大小', max_length=50, null=True, verbose_name='文库片段大小')),
                ('seq_platform', models.CharField(blank=True, help_text='测序平台', max_length=50, null=True, verbose_name='测序平台')),
                ('platform_type', models.CharField(blank=True, help_text='平台类型', max_length=50, null=True, verbose_name='平台类型')),
                ('seq_celue', models.CharField(blank=True, help_text='测序策略', max_length=50, null=True, verbose_name='测序策略')),
                ('filename', models.CharField(blank=True, help_text='文件名称', max_length=1000, null=True, verbose_name='文件名称')),
                ('filelink', models.CharField(blank=True, help_text='文件保存位置', max_length=1000, null=True, verbose_name='文件保存位置')),
                ('analyticalLab', models.CharField(blank=True, help_text='分析实验室', max_length=100, null=True, verbose_name='分析实验室')),
                ('analyticalPerson', models.CharField(blank=True, help_text='分析人', max_length=50, null=True, verbose_name='分析人')),
                ('rawData', models.CharField(blank=True, help_text='测序原始数据处理', max_length=1000, null=True, verbose_name='测序原始数据处理')),
                ('filterMethod', models.CharField(blank=True, help_text='测序数据过滤方法', max_length=500, null=True, verbose_name='测序数据过滤方法')),
                ('assemblyMethod', models.CharField(blank=True, help_text='序列组装方法', max_length=200, null=True, verbose_name='序列组装方法')),
                ('annotationMethod', models.CharField(blank=True, help_text='序列注释方法', max_length=200, null=True, verbose_name='序列注释方法')),
                ('qualityMatrix', models.CharField(blank=True, help_text='序列组装质量矩阵', max_length=200, null=True, verbose_name='序列组装质量矩阵')),
                ('remarks', models.CharField(blank=True, max_length=250, null=True, verbose_name='备注')),
                ('organizationId', models.IntegerField(blank=True, help_text='组织id', null=True, verbose_name='组织id')),
                ('create_userid', models.IntegerField(blank=True, help_text='创建用户id', null=True, verbose_name='创建用户id')),
                ('update_userid', models.IntegerField(blank=True, help_text='更新用户id', null=True, verbose_name='更新用户id')),
            ],
            options={
                'verbose_name': '测序实验信息表',
                'verbose_name_plural': '测序实验信息表',
                'ordering': ['-create_time', '-updated_time'],
            },
        ),
        migrations.CreateModel(
            name='StrainInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_delete', models.BooleanField(default=False)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(auto_now=True)),
                ('expOperator', models.CharField(blank=True, help_text='微生物实验操作员', max_length=100, null=True, verbose_name='微生物实验操作员')),
                ('strainId', models.CharField(blank=True, help_text='菌株编号', max_length=100, null=True, verbose_name='菌株编号')),
                ('isolateNo', models.CharField(blank=True, help_text='Isolate编号', max_length=100, null=True, verbose_name='Isolate编号')),
                ('separationTime', models.CharField(blank=True, help_text='分离时间', max_length=100, null=True, verbose_name='分离时间')),
                ('identificationResult', models.CharField(blank=True, help_text='其他平台鉴定结果', max_length=200, null=True, verbose_name='其他平台鉴定结果')),
                ('identificationMethod', models.CharField(blank=True, help_text='鉴定方法', max_length=200, null=True, verbose_name='鉴定方法')),
                ('serotype', models.CharField(blank=True, help_text='血清型', max_length=100, null=True, verbose_name='血清型')),
                ('sp_medium', models.CharField(blank=True, help_text='培养基', max_length=200, null=True, verbose_name='培养基')),
                ('sp_temperature', models.CharField(blank=True, help_text='培养温度', max_length=100, null=True, verbose_name='培养温度')),
                ('sp_oxygen', models.CharField(blank=True, help_text='氧气需求', max_length=100, null=True, verbose_name='氧气需求')),
                ('sp_cultureCycle', models.CharField(blank=True, help_text='培养周期', max_length=100, null=True, verbose_name='培养周期')),
                ('generation', models.CharField(blank=True, help_text='传代次数', max_length=100, null=True, verbose_name='传代次数')),
                ('geneMethod', models.CharField(blank=True, help_text='传代方法', max_length=100, null=True, verbose_name='传代方法')),
                ('antibioticName', models.CharField(blank=True, help_text='抗生素名称', max_length=100, null=True, verbose_name='抗生素名称')),
                ('micZoi', models.CharField(blank=True, help_text='MIC值/ZOI值', max_length=100, null=True, verbose_name='MIC值/ZOI值')),
                ('pesistance', models.CharField(blank=True, help_text='抗性表型', max_length=100, null=True, verbose_name='抗性表型')),
                ('ar_testMethod', models.CharField(blank=True, help_text='测试方法（抗生素）', max_length=100, null=True, verbose_name='测试方法（抗生素）')),
                ('ar_testStandard', models.CharField(blank=True, help_text='测试标准（抗生素）', max_length=100, null=True, verbose_name='测试标准（抗生素）')),
                ('ar_testPlatform', models.CharField(blank=True, help_text='测试平台（抗生素）', max_length=100, null=True, verbose_name='测试平台（抗生素）')),
                ('ar_remarks', models.CharField(blank=True, help_text='备注（抗菌谱）', max_length=100, null=True, verbose_name='备注（抗菌谱）')),
                ('vf_name', models.CharField(blank=True, help_text='毒力因子名称', max_length=50, null=True, verbose_name='毒力因子名称')),
                ('vf_testMethod', models.CharField(blank=True, help_text='毒力因子检测方法', max_length=50, null=True, verbose_name='毒力因子检测方法')),
                ('insperctionLimit', models.CharField(blank=True, help_text='毒力因子检测限度', max_length=50, null=True, verbose_name='毒力因子检测限度')),
                ('colonyMorpholob', models.CharField(blank=True, help_text='菌落形态', max_length=200, null=True, verbose_name='菌落形态')),
                ('phyandMio', models.CharField(blank=True, help_text='生理生化', max_length=200, null=True, verbose_name='生理生化')),
                ('remarks', models.CharField(blank=True, max_length=250, null=True, verbose_name='备注')),
                ('organizationId', models.IntegerField(blank=True, help_text='组织id', null=True, verbose_name='组织id')),
                ('create_userid', models.IntegerField(blank=True, help_text='创建用户id', null=True, verbose_name='创建用户id')),
                ('update_userid', models.IntegerField(blank=True, help_text='更新用户id', null=True, verbose_name='更新用户id')),
            ],
            options={
                'verbose_name': '菌株信息管理表',
                'verbose_name_plural': '菌株信息管理表',
                'ordering': ['-create_time', '-updated_time'],
            },
        ),
        migrations.CreateModel(
            name='Tasklist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jobid', models.CharField(max_length=50, verbose_name='任务编号')),
                ('strain', models.CharField(max_length=100, verbose_name='菌株编号')),
                ('sampleName', models.CharField(blank=True, max_length=100, null=True, verbose_name='样品名称')),
                ('Seq_platform', models.CharField(blank=True, max_length=200, null=True, verbose_name='测序平台')),
                ('library', models.CharField(blank=True, max_length=100, null=True, verbose_name='文库编号')),
                ('datanum', models.CharField(blank=True, max_length=200, null=True, verbose_name='数据量')),
                ('protocol', models.CharField(blank=True, max_length=50, null=True, verbose_name='任务类别')),
                ('tag', models.CharField(blank=True, max_length=50, null=True, verbose_name='工具分类')),
                ('stauts', models.CharField(blank=True, max_length=50, null=True, verbose_name='任务状态')),
                ('submit_date', models.CharField(blank=True, max_length=50, verbose_name='提交时间')),
                ('complete_date', models.CharField(blank=True, max_length=50, verbose_name='完成时间')),
                ('result', models.CharField(blank=True, max_length=100, verbose_name='结果信息')),
                ('create_date', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
            ],
        ),
        migrations.CreateModel(
            name='Uploadfq',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strain', models.CharField(max_length=100, verbose_name='菌株编号')),
                ('sampleName', models.CharField(blank=True, max_length=100, verbose_name='样品名称')),
                ('library', models.CharField(blank=True, max_length=100, verbose_name='文库编号')),
                ('Seq_platform', models.CharField(blank=True, max_length=200, verbose_name='测序平台')),
                ('Seq_batch', models.IntegerField(blank=True, default=1, verbose_name='测序批次')),
                ('platform_type', models.CharField(blank=True, max_length=200, verbose_name='平台类型')),
                ('filepath', models.CharField(blank=True, max_length=1000, verbose_name='fastq路径')),
                ('filename', models.CharField(blank=True, max_length=2000, verbose_name='fastq名称')),
                ('create_date', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
            ],
        ),
    ]
